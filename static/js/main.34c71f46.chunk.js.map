{"version":3,"sources":["views/UserTable.jsx","components/NewUser.jsx","components/EditUser.jsx","config.js","App.js","serviceWorker.js","index.js"],"names":["UserTable","props","className","users","length","map","user","key","id","name","username","onClick","editRow","deleteUser","colSpan","NewUser","initialFormState","useState","setUser","handleInputChange","event","target","value","onSubmit","preventDefault","addUser","type","onChange","EditUser","currentUser","updateUser","setEditing","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","App","auth","storage","setUsers","editing","setCurrentUser","useEffect","collection","onSnapshot","querySnapshot","list","forEach","doc","push","data","updatedUser","update","add","then","set","merge","console","log","catch","error","delete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34c71f46.chunk.js","sourcesContent":["import React from 'react'\n\nconst UserTable = (props) => (\n    <table className=\"table striped\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Username</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {props.users.length > 0 ? (\n                props.users.map(user => (\n                    <tr key={user.id}>\n                        <td>{user.name}</td>\n                        <td>{user.username}</td>\n                        <td>\n                            <button onClick={() => {props.editRow(user)}} className=\"btn btn-primary\">Edit</button>\n                            <button onClick={() => props.deleteUser(user.id)} className=\"btn btn-danger ml-2\">Delete</button>\n                        </td>\n                    </tr>\n                ))\n            ) : (\n                    <tr>\n                        <td colSpan={3}>No users</td>\n                    </tr>\n                )}\n        </tbody>\n    </table>\n)\n\nexport default UserTable","import React, { useState } from 'react'\n\nconst NewUser = props => {\n\n    //initial state object\n    const initialFormState = { id: null, name: '', username: '' }\n\n    //init state\n    const [user, setUser] = useState(initialFormState)\n\n    //handle form input change\n    const handleInputChange = event => {\n       \n        //destructure input\n        const { name, value } = event.target\n\n        //set user state\n        setUser({ ...user, [name]: value })\n    }\n\n\n    return (\n        <form className=\"form\"\n            onSubmit={event => {\n                event.preventDefault()\n                if (!user.name || !user.username) return\n\n                props.addUser(user)\n                setUser(initialFormState)\n            }}>\n            <label>Name</label>\n            <input className=\"form-control\" type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n            <label>Username</label>\n            <input className=\"form-control\" type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n            <button className=\"btn btn-success mt-3\">Add new user</button>\n        </form>\n    )\n}\n\nexport default NewUser","import React, { useState } from 'react'\n\nconst EditUser = props => {\n\n//init user state\n  const [user, setUser] = useState(props.currentUser)\n\n  //hnadle input change\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    //add new user to other users\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form className=\"form\"\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Name</label>\n      <input className=\"form-control\" type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input className=\"form-control\" type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button className=\"btn btn-primary ml-3 mt-2\">Update</button>\n      <button onClick={() => props.setEditing(false)} className=\"btn btn-primary ml-3 mt-2\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUser","import firebase from 'firebase';\n\nvar config = {\n  apiKey: \"AIzaSyDFhyNZnYFcPITWmCVe9ckDgf_cORdKVVU\",\n  authDomain: \"ai-programming.firebaseapp.com\",\n  databaseURL: \"https://ai-programming.firebaseio.com\",\n  projectId: \"ai-programming\",\n  storageBucket: \"ai-programming.appspot.com\",\n  messagingSenderId: \"923521126693\",\n  appId: \"1:923521126693:web:8fe5712ffa97992a224acc\",\n  measurementId: \"G-YCVZ63THB6\"\n\n};\n\nfirebase.initializeApp(config);\nconst db = firebase.firestore()\n// db.enablePersistence()\n\nconst auth = firebase.auth()\nconst file = firebase.storage()\n\nexport { db, auth, file }","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport UserTable from './views/UserTable'\nimport NewUser from './components/NewUser'\nimport EditUser from './components/EditUser'\nimport { db } from './config'\n\nconst App = () => {\n\n  //init state users list\n  const [users, setUsers] = useState([])\n\n  //init state edit user bool\n  const [editing, setEditing] = useState(false)\n\n  //init default user object\n  const initialFormState = { id: null, name: '', username: '' }\n\n  //init current user state\n  const [currentUser, setCurrentUser] = useState(initialFormState)\n\n  //get users from firebase\n  const getUsers = () => {\n    db.collection('users')\n      .onSnapshot(function (querySnapshot) {\n        let list = []\n        querySnapshot.forEach(function (doc) {\n          list.push(doc.data());\n        })\n\n        setUsers(list)\n      })\n  }\n\n  //use effectHook\n  useEffect(() => {\n\n    getUsers();\n\n  }, [])\n\n  //add user\n  const addUser = user => {\n\n    db.collection('users').add(user).then((doc) => {\n\n      db.collection('users')\n        .doc(doc.id)\n        .set(\n          {\n            id: doc.id,\n          },\n          {\n            merge: true,\n          }\n        )\n        console.log(\"User with ID: \"+doc.id+\" added succesfully\")\n    }).catch(error => {\n      console.log(error)\n    })\n  }\n\n  //pass signle user to form\n  const editRow = user => {\n    setEditing(true)\n\n    setCurrentUser({ id: user.id, name: user.name, username: user.username })\n  }\n\n  //update user\n  const updateUser = (id, updatedUser) => {\n    setEditing(false)\n\n    db.collection('users')\n        .doc(id)\n        .update(updatedUser);\n  }\n\n  //delete user\n  const deleteUser = id => {\n    db.collection(\"users\")\n    .doc(id)\n    .delete();\n    \n  }\n\n  return (\n    <div className=\"container mt-2\">\n      <div>\n        <h2>CRUD App with Hooks and Firebase Firestore</h2>\n      </div>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          {editing ? (\n            <div>\n              <h2>Edit user</h2>\n              <EditUser\n                editing={editing}\n                setEditing={setEditing}\n                currentUser={currentUser}\n                updateUser={updateUser}\n              />\n            </div>\n          ) : (\n              <div>\n                <h3>Add user</h3>\n                <NewUser addUser={addUser} />\n              </div>\n            )}\n        </div>\n        <div className=\"col-md-6\">\n          <h3>Users List</h3>\n          <UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}